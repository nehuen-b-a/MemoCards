@startuml

class Configurador {
    - intervaloInicial : List<Long>
    - distanciaPorcentualIntervalo : Double
    - coeficienteDeRetencion : Double
    - bonusFacil : Double
    - bonusDificil : Double
    - intervaloMinimo : Long
    - intervaloMaximo : Long
    - umbralSanguijuelas : Integer
    - maximoDeNuevasCartas : Integer
    - maximoDeCartasARepasar : Integer
    - intervaloMaximoARevisarEnUnaSesion : Long
    - intervaloParaIncluirMemoCardsNuevas : Long
    - barajador : ITipoBarajador

    + setIntervaloInicial(intervaloInicial : List<Long>) : void
    + configuradorPredeterminado() : Configurador
}

class Estudiante {
    - nombre : String
    - apellido : String
    - usuario : Usuario
    - tematicas : Set<TematicaEstudio>
    - preferencias : List<Configurador>
    - historialDeEstudio : List<SesionDeEstudio>

    + agregarTematicaDeEstudio(tematica : TematicaEstudio) : void
    + agregarConfiguracion(configuracion : Configurador) : void
    + agregarMazoATematica(mazo : Mazo, idTematica : Long) : void
    + agregarMemoCard(memoCard : MemoCard, idTematica : Long, idMazo : Long) : void
    + iniciarSesionDeEstudio(idTematica : Long, idMazo : Long) : SesionDeEstudio
}

class Mazo {
    - id : Long
    - nombre : String
    - descripcion : String
    - preferencia : Configurador
    - memoCardsNoVistas : Set<MemoCard>
    - memoCardsVistas : Set<MemoCard>
    - memoCardsEnRepasoActivo : CircularList<MemoCard>
    - fechaUltimaInclusionNuevasMemoCards : LocalDateTime

    + agregarMemoCard(memoCard : MemoCard...) : void
    + laMemoCardEsExistente(memoCard : MemoCard) : Boolean
    + generarBarajaDeMemoCards() : Set<MemoCard>
}

class SesionDeEstudio {
    - id : Long
    - estudiante : Estudiante
    - mazo : Mazo
    - tiempoEstudio : Long
    - memoCardsPorRevisar : Set<MemoCard>
    - memoCardsRevisadas : Set<MemoCard>
    - cantidadTotalIntentos : Integer
    - cantidadTotalAciertos : Integer
    - cantidadTotalDesaciertos : Integer
    - cantidadTotalDificil : Integer
    - cantidadTotalBien : Integer
    - cantidadTotalFacil : Integer
    - fechaInicio : LocalDateTime
    - fechaFin : LocalDateTime
    - estaFinalizada : Boolean

    + comenzarSesion() : void
    + finalizarSesion() : void
    + registrarMetrica(memoCard : MemoCard, dificultad : Dificultad) : void
}

class TematicaEstudio {
    - id : Long
    - nombre : String
    - descripcion : String
    - mazos : Set<Mazo>

    + agregarMazo(mazo : Mazo) : void
    + buscarMazoPorId(id : Long) : Mazo
    + elMazoEsExistente(mazo : Mazo) : Boolean
}

class MemoCard {
    - id : Long
    - nombre : String
    - pregunta : String
    - respuesta : RespuestaMemo
    - fechaUltimoRepaso : LocalDateTime
    - estadoMemoCard : EstadoMemoCard
    - configurador : Configurador
    - historialEstados : List<HistorialEstadoMemoCard>
    - intervaloMinutos : Long
    - cantidadDeOlvidos : Integer
    - intentos : Integer
    - esSanguijuela : Boolean
    - esNueva : Boolean
    - sesionDeEstudioActual : SesionDeEstudio

    + cambiarEstado(nuevoEstado : EstadoMemoCard) : void
    + estaListaParaRepasar() : Boolean
}

class RespuestaMemo {
    - id : Long
    - texto : String
    - rutaImagen : String
    - rutaAudio : String
    - rutaVideo : String
}

enum Dificultad {
    FACIL
    BIEN
    DIFICIL
    OLVIDO
}

abstract class EstadoMemoCard {
    - id : Long
    - nombre : String
    - memoCard : MemoCard
    - intervaloActual : Long
    - rachaAciertos : Integer
    - rachaDesaciertos : Integer
    - umbralSanguijuela : Integer
    - coeficienteDeBonusPorFacilidad : Double
    - coeficientePorDificultad : Double

    + cambiarIntervalo(intervaloAnterior : Long, dificultad : Dificultad) : Long
    + estimarIntervalo(intervaloAnterior : Long, dificultad : Dificultad) : Long
    + actualizarEstado() : void
}

class Aprendizaje extends EstadoMemoCard {
    - intervalos : List<Long>
    - intervalosBonificados : List<Long>
    - bonificacionTotal : Double

    + cambiarIntervalo(intervaloAnterior : Long, dificultad : Dificultad) : Long
    + estimarIntervalo(intervaloAnterior : Long, dificultad : Dificultad) : Long
    + actualizarEstado() : void
}

class Reaprendizaje extends EstadoMemoCard {
    - intervalos : List<Long>
    - intervalosBonificados : List<Long>
    - distanciaPorcentualIntervalo : Double
    - intervaloMin : Long
    - bonificacionTotal : Double

    + cambiarIntervalo(intervaloAnterior : Long, dificultad : Dificultad) : Long
    + estimarIntervalo(intervaloAnterior : Long, dificultad : Dificultad) : Long
    + actualizarEstado() : void
}

class Repaso extends EstadoMemoCard {
    - coeficienteDeRetencion : Double
    - intervaloMax : Long

    + cambiarIntervalo(intervaloAnterior : Long, dificultad : Dificultad) : Long
    + estimarIntervalo(intervaloAnterior : Long, dificultad : Dificultad) : Long
    + actualizarEstado() : void
}

class HistorialEstadoMemoCard {
    - id : Long
    - memoCard : MemoCard
    - estadoAnterior : EstadoMemoCard
    - estadoNuevo : EstadoMemoCard
    - fechaCambio : LocalDateTime
}

interface ITipoBarajador {
    + barajarComienzoDeSesion(memoCardsNuevas : List<MemoCard>, memoCardsRepaso : List<MemoCard>, memoCardsPendientes : CircularList<MemoCard>) : CircularList<MemoCard>
    + barajar(memoCards : CircularList<MemoCard>) : CircularList<MemoCard>
    + ordenarMemoCards(memoCards : List<MemoCard>) : List<MemoCard>
}

class IntervaloMenorAMayor implements ITipoBarajador {
    + barajarComienzoDeSesion(memoCardsNuevas : List<MemoCard>, memoCardsRepaso : List<MemoCard>, memoCardsActivas : CircularList<MemoCard>) : CircularList<MemoCard>
    + barajar(memoCards : CircularList<MemoCard>) : CircularList<MemoCard>
    + ordenarMemoCards(memoCards : List<MemoCard>) : List<MemoCard>
}

class Usuario {
    - id : Long
    - nombre : String
    - clave : String
    - rol : Rol

    + setClaveEncriptada(clave : String) : void
    + verificarClave(claveIngresada : String) : Boolean
}

class Rol {
    - id : Long
    - tipoRol : TipoRol
    - permisos : Set<Permiso>

    + tenesPermiso(permiso : Permiso) : Boolean
    + agregarPermiso(permiso : Permiso) : void
    + quitarPermiso(permiso : Permiso) : void
}

class Permiso {
    - id : Long
    - nombre : String
}

enum TipoRol {
    ADMIN
    USER
}

interface TipoValidacion {
    + validar(clave : String) : Boolean
    + getMensajeError() : String
}

class AusenciaDeCredencialesPorDefecto implements TipoValidacion {
    - usuario : String

    + validar(clave : String) : Boolean
    + getMensajeError() : String
}

class ListaDePeoresClavesMemorizadas implements TipoValidacion {
    + validar(clave : String) : Boolean
    + getMensajeError() : String
}

class LongitudEstipulada implements TipoValidacion {
    - longitudMaxima : int
    - longitudMinima : int

    + validar(clave : String) : Boolean
    + getMensajeError() : String
}

class ValidadorDeClave {
    - validadores : Set<TipoValidacion>
    - erroresFinales : String

    + validar(clave : String) : Boolean
}


' Relaciones entre clases
Configurador --> ITipoBarajador
Estudiante --> Usuario
Estudiante --> TematicaEstudio
Estudiante --> Configurador
Estudiante --> SesionDeEstudio
TematicaEstudio *-- Mazo
Mazo *-- MemoCard
Mazo --> Configurador
SesionDeEstudio o-- Mazo
SesionDeEstudio ..> MemoCard
SesionDeEstudio o-- Estudiante
MemoCard --> EstadoMemoCard
MemoCard --> RespuestaMemo
MemoCard --> Configurador
MemoCard --> HistorialEstadoMemoCard
Aprendizaje --> Repaso
Reaprendizaje --> Repaso
Repaso --> Reaprendizaje
HistorialEstadoMemoCard --> MemoCard
HistorialEstadoMemoCard --> EstadoMemoCard
Usuario --> Rol
Rol --> Permiso
Rol --> TipoRol
ValidadorDeClave --> TipoValidacion
SesionDeEstudio --> Dificultad
MemoCard --> Dificultad
AusenciaDeCredencialesPorDefecto --> Usuario


@enduml
